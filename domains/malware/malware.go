package malware

import (
	"regexp"

	malware "github.com/s9rA16Bf4/go-evil/domains/malware/private"
	"github.com/s9rA16Bf4/notify_handler/go/notify"
)

const (
	EXTRACT_SUBDOMAIN = "[a-z]+\\.([a-z]+)\\.([a-z]+)\\(\"(.*)\"\\);"
	EXTRACT_FUNCTION  = "(malware|#object|#self|#this)\\.([a-z]+)\\((\"(.+)\")?\\);"
)

func Parse(new_line string) {
	regex := regexp.MustCompile(EXTRACT_SUBDOMAIN)
	result := regex.FindAllStringSubmatch(new_line, -1)
	if len(result) > 0 { // There is a subdomain to extract
		switch result[0][1] {
		case "set":
			switch result[0][2] {
			case "extension":
				malware.SetExtension(result[0][4])
			case "name":
				malware.SetBinaryName(result[0][4])
			default:
				function_error(result[0][2])
			}
		case "add":
			switch result[0][2] {
			case "random_func":
				malware.AddRandomFunction()
			case "random_var":
				malware.AddRandomVariable()
			}
		default:
			subdomain_error(result[0][2])
		}
	} else { // There might be a function which doesn't require a subdomain to work
		regex = regexp.MustCompile(EXTRACT_FUNCTION)
		result = regex.FindAllStringSubmatch(new_line, -1)
		if len(result) > 0 {
			//switch result[0][1] {
			//default:
			//	function_error(result[0][1])
			//}
		}
	}
}

func subdomain_error(subdomain string) {
	notify.Error("Unknown subdomain "+subdomain, "malware.Parse()")
}
func function_error(function string) {
	notify.Error("Unknown function "+function, "malware.Parse()")
}
