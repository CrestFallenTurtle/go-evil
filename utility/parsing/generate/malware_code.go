package generate

import (
	"fmt"

	"github.com/TeamPhoneix/go-evil/utility/structure"
	"github.com/TeamPhoneix/go-evil/utility/structure/functions"
	"github.com/s9rA16Bf4/notify_handler/go/notify"
)

// Filters each definied function into the two categories, boot and loop (call functions aren't handled here)
func filter_function_types(s_json string) string {
	data_object := structure.Receive(s_json)

	for _, d_func := range data_object.Functions {

		// Identify the function type
		switch d_func.Func_type {
		case "b":
			data_object.Add_boot_function(d_func.Name)

		case "l":
			data_object.Add_loop_function(d_func.Name)

		case "e":
			data_object.Add_end_function(d_func.Name)

		}

	}

	return structure.Send(data_object)
}

// Converts each sub function into a corresponding set of golang code
// Creates all functions, loop, boot and call
func Generate_go_functions(s_json string) string {

	s_json = filter_function_types(s_json)
	data_object := structure.Receive(s_json)

	// For each of our functions
	for _, d_func := range data_object.Functions {
		body := []string{}
		function_type := ""
		return_type := ""

		// Define the header
		if d_func.Func_type == "c" { // it's a call function

			switch d_func.Return_type { // Let's check the return type
			case "string":
				function_type = "string"

			case "boolean":
				function_type = "bool"

			case "integer":
				function_type = "int"

			default:
				notify.Error(fmt.Sprintf("Unknown return type '%s'", d_func.Return_type), "function_construction.generate_go_functions()")
			}

		}

		converted_code, s_json := Generate_golang_code(d_func.Gut, structure.Send(data_object)) // Generate the body code

		body = append(body, converted_code...)

		switch d_func.Return_type {
		case "string":
			return_type = "string"

		case "boolean":
			return_type = "bool"

		case "integer":
			return_type = "int"

		}

		data_object = structure.Receive(s_json)
		data_object.Add_go_function(functions.Go_func_t{Name: d_func.Name, Func_type: function_type, Part_of_struct: "", Return_type: return_type, Parameters: []string{}, Gut: body})
	}

	return structure.Send(data_object)
}
